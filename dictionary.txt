*** Variables ***

Each variable have an associated word which behaves like a regular variable,
that is, it pushes the address of the variable on the stack.

here            Memory offset pointing to the end of the dictionary. Creating
                a new entry places that entry HERE and then increases it
                accordingly.

current         Memory offset pointing to the last entry of the dictionary.

*** Builtin words ***

.               ( n -- )        Print n in decimal representation.
.x              ( n -- )        Print n in hex representation.
: w t1 t2 ... ; ( -- )          Define word w and associate with code compiled
                                from tokens.
+               ( x y -- z )    x + y => z
-               ( x y -- z )    x - y => z
*               ( x y -- z )    x * y => z
/               ( x y -- z )    x / y => z
!               ( x a -- )      store value x in cell at address a.
@               ( a -- x )      fetch value x from cell at address a.
' w             ( -- a )        Find word w and push entry addr.
allot           ( n -- )        Increase "here" variable by n.
bye             ( -- )          Quits interpreter.
C!              ( x a -- )      store byte value x in cell at address a.
C@              ( a -- x )      fetch value x from cell at address a.
call            ( a -- )        Set PC to a and execute code until the CPU has
                                halted. Note that the halting condition is
                                temporary. When the interpreter has fully moved
                                into z80, a RET will return from that call.
create x        ( -- )          Create entry named x, header only
dup             ( n -- n n )    Duplicates TOS.
emit            ( c -- )        Emit character c to console.
execute         ( hi -- )       Execute from heap starting at offset hi.
forget x        ( -- )          Remove latest entry named x from dict.
loadf fname     ( -- )          Reads file fname and interprets its contents as
                                if it was typed directly in the interpreter.
lshift          ( x y -- z )    left shift of x by y places => z
regr r          ( -- n)         Put value of register r in n. r can be a single
                                register name (A, B, C) or a pair (BC, DE).
regw r          ( n -- )        Put n in register r.
rshift          ( x y -- z )    right shift of x by y places => z
see             ( a -- )        Print debug info about entry at addr a.

*** In core ***

variable x      ( -- )          Creates a new word x pointing to a 2 bytes cell.
?               ( -- )          Same as "@ ."
,               ( n -- )        Grow latest entry by 2 bytes and set those bytes
                                to value n.
C,              ( n -- )        Grow latest entry by 1 byte and set that byte to
                                value n.
splitb          ( n -- h l )    Split number n into hish and low bytes.

*** zasm (in zasm.fth) ***

This unit supplies word to emit binary upcode from mnemonics. Those mnemonics
follow these patterns:

No argument: The word, which corresponds to the z80 mnemonic, spits (using
"C,") the upcode. For example, "HALT," spits 0x76.

Regular argument(s): Upcode that follow a rgular pattern have their argument
"spec letter" as a prefix in the word. For example, "LD r, r'" is invoked with
the word "LDrr,". Arguments must be in the stack in *inverse* order (so that
in the code itself, they appear in an order that isn't mind-bending). For
example, "LD A, 42" is typed "A 42 LDrn,".

Special arguments: Some upcodes have some kind of "constant" arguments and map
to irregular upcodes. For example "ADD HL, ss". These have specifics words. For
example, "ADD HL, DE" is invoked as "DE ADDHLss,"

Not all upcodes are implemented yet. Look in zasm.fth.
